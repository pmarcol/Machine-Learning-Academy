index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "complete")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "average")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "complete")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "single")
model=hclust(dist.matrix, method = "complete")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "single")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
View(dane)
dane[model.klasa==2]
names(dane)[model.klasa==2]
View(dane.oryg)
row.names(dane)[model.klasa==2]
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "complete")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "average")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
row.names(model.klasa==4)
row.names(dane)[model.klasa==4]
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "average")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=3)#k.opt)
plot(model)
table(model.klasa)
row.names(dane)[model.klasa==4]
row.names(dane)[model.klasa==3]
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model=hclust(dist.matrix, method = "average")
plot(model)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=cutree(model, k=k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa=cutree(model, k=k.opt)
plot(model)
table(model.klasa)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=kmeans(dane)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=kmeans(dane, centers = k)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=kmeans(dane, centers = k.par)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=kmeans(dane, centers = k.par)
print(model.klasa)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=kmeans(dane, centers = k.par)$cluster
print(model.klasa)
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
library(clusterSim)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=kmeans(dane, centers = k.par)$cluster
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa = kmeans(dane, centers = k.opt)
model.klasa
model.klasa$size
install.packages('cluster')
install.packages("cluster")
test = clara(dane, k=3, metrix = 'euclidean')
library(cluster)
test = clara(dane, k=3, metrix = 'euclidean')
test = clara(dane, k=3, metric = 'euclidean')
test
test$clustering
library(clusterSim)
library(cluster)
# library(e1071)
#########################################################
### Zadanie 3.:
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
index.CH=c()
index.Sil=c()
k=c(2:10)
for (k.par in k) {
model.klasa=clara(x=dane, k=k.par, metric="euclidean")$clustering
index.CH=c(index.CH, index.G1(dane, model.klasa))
index.Sil=c(index.Sil, index.S(dist.matrix, model.klasa))
}
k.opt=which.max(index.CH)+1
print(k.opt)
print(index.CH[k.opt-1])
print(index.Sil[k.opt-1])
print(index.CH)
print(index.Sil)
model.klasa = clara(x=dane, k=k.opt, metric="euclidean")$clustering
table(model.klasa)
library(clusterSim)
library(cluster)
dane=read.csv2("http://web2.ue.katowice.pl/trzesiok/FP/3edycjaszkolenML/3swiat08.csv", row.names=2)
dane.oryg=dane
dane=dane[,-1]
head(dane)
dane = scale(dane)
dist.matrix=dist(dane, method = "euclidean")
model_complete=hclust(dist.matrix, method = "complete")
model_ward=hclust(dist.matrix, method = "ward.D2")
cluster_ward = cutree(model_ward, k=k.opt)
cluster_complete = cutree(model_complete, k=k.opt)
cluster_kmeans = kmeans(dane, centers = 3)$cluster
cluster_kmedoids = clara(x=dane, k=3, metric="euclidean")$clustering
library(e1071)
classAgreement(cluster_ward, cluster_complete)
classAgreement(cluster_ward, cluster_kmeans)
classAgreement(cluster_ward, cluster_kmedoids)
classAgreement(cluster_complete, cluster_kmeans)
classAgreement(cluster_complete, cluster_kmedoids)
classAgreement(cluster_kmeans, cluster_kmedoids)
classAgreement(table(cluster_ward, cluster_complete))
classAgreement(table(cluster_ward, cluster_kmeans))
classAgreement(table(cluster_ward, cluster_kmedoids))
classAgreement(table(cluster_complete, cluster_kmeans))
classAgreement(table(cluster_complete, cluster_kmedoids))
classAgreement(table(cluster_kmeans, cluster_kmedoids))
classAgreement(table(cluster_ward, cluster_complete))$rand
classAgreement(table(cluster_ward, cluster_kmeans))$rand
classAgreement(table(cluster_ward, cluster_kmedoids))$rand
classAgreement(table(cluster_complete, cluster_kmeans))$rand
classAgreement(table(cluster_complete, cluster_kmedoids))$rand
classAgreement(table(cluster_kmeans, cluster_kmedoids))$rand
set.seed(123)
cluster_kmeans = kmeans(dane, centers = 3)$cluster
set.seed(12345)
cluster_kmeans2 = kmeans(dane, centers = 3)$cluster
classAgreement(table(cluster_kmeans, cluster_kmeans2))$rand
set.seed(12345)
cluster_kmeans2 = kmeans(dane, centers = 3)$cluster
set.seed(123)
cluster_kmeans = kmeans(dane, centers = 3)$cluster
classAgreement(table(cluster_kmeans, cluster_kmeans2))$rand
set.seed(0)
cluster_kmeans2 = kmeans(dane, centers = 3)$cluster
set.seed(123)
cluster_kmeans = kmeans(dane, centers = 3)$cluster
classAgreement(table(cluster_kmeans, cluster_kmeans2))$rand
